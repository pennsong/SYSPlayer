<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:com="*"
	layout="vertical" width="100%" minWidth="322" height="281" minHeight="281"
	title="Upload Files" creationComplete="initCom()" xmlns:assets="com.flashdev.file.assets.*">
	
	<mx:Metadata>
		[Event(name="uploadComplete", type="flash.events.Event")]
		[Event(name="uploadProgress", type="flash.events.ProgressEvent")]
		[Event(name="uploadCancel", type="flash.events.Event")]
		[Event(name="uploadIOError", type="flash.events.IOErrorEvent")]
		[Event(name="uploadSecurityError", type="flash.events.SecurityErrorEvent")]
		[Event(name="controlButton", type="events.ControlEvent")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			
			/*
				
			Written by:
			Dustin Andrew
			dustin@flash-dev.com
			www.flash-dev.com
			
			FileUpload
			
			Panel component for uploading files.
			(Icons from http://www.famfamfam.com)
			
			LAST UPDATED:
			12/15/06
			
			*/
			
			import flash.events.*;
			import flash.net.*;
			
			import mx.controls.*;
			import mx.events.*;
			import mx.managers.*;
			import events.ControlEvent;
			//interactive var
			[Bindable]
			public var varSYSPlayer:SYSPlayer;
			
			private var _strUploadUrl:String;
			private var _refAddFiles:Array;	
			private var _refUploadFile:FileReference;
			[Bindable]
			private var _arrUploadFiles:Array;
			private var _numCurrentUpload:Number = 0;
			private var _typeList:Array;	
			private var _extensions:Array = new Array();
			private var _maxSize:uint = uint.MAX_VALUE;
			
			// Set uploadUrl
			public function set uploadUrl(strUploadUrl:String):void {
				_strUploadUrl = strUploadUrl;
			}
			
			// _typeList is an array of FileFilter class
			public function set typeList(value:Array):void {
				_typeList = value;
				
				_extensions.length = 0;
				if (_typeList && _typeList.length > 0) {
					for (var i:int = 0; i < _typeList.length; i++) {
						var fileFilter:FileFilter = _typeList[i];
						
						if (fileFilter.extension && fileFilter.extension != "*" && fileFilter.extension != "*.*") {
							_extensions = _extensions.concat(fileFilter.extension.split(";"));
							if (fileFilter.macType)
								_extensions = _extensions.concat(fileFilter.macType.split(";"));
						}
					}
					
					// remove the *
					for (i = 0; i < _extensions.length; i++) {
						if (_extensions[i].charAt(0) == "*")
							_extensions[i] = String(_extensions[i]).substr(1);
						_extensions[i] = String(_extensions[i]).toUpperCase();
					}
				}
			}
			
			// set the max size in bytes
			public function set maxSize(value:uint):void {
				_maxSize = value;
			}
			
			// Initalize
			private function initCom():void {
				_arrUploadFiles = new Array();				
				enableUI();
				uploadCheck();
			}
			
			// Called to add file(s) for upload
			private function addFiles():void {
//				_refAddFiles = new FileReferenceList();
//				_refAddFiles.addEventListener(Event.SELECT, onSelectFile);
//				_refAddFiles.browse(_typeList);
				initCom();
				onSelectFile();
				startUpload();
			}
			
			// Called when a file is selected
			private function onSelectFile():void {
				var uploadingFolder:File = File.applicationStorageDirectory;
				//var uploadingFolder:File = new File("/Users/penn/Library/Preferences/SYSplayer/Local Store/");
				_refAddFiles=uploadingFolder.getDirectoryListing();
				_refAddFiles.sort();
				var arrFoundList:Array = new Array();
				
				if (_refAddFiles.length >= 1) {				
					for (var k:Number = 0; k < _refAddFiles.length; k++) {
						var validStatus:String = validateFile(_refAddFiles[k]);
						if (validStatus == "")
							_arrUploadFiles.push({
								no: _arrUploadFiles.length + 1,
								name:_refAddFiles[k].name,
								size:formatFileSize(_refAddFiles[k].size),
								file:_refAddFiles[k],
								status: ""});
						else 
							arrFoundList.push(_refAddFiles[k].name + " " + validStatus);
					}
					listFiles.dataProvider = _arrUploadFiles;
					
					if (_arrUploadFiles && _arrUploadFiles.length > 0)
						listFiles.selectedIndex = _arrUploadFiles.length - 1;
					else
						listFiles.selectedIndex = -1;
				}				
				if (arrFoundList.length >= 1) {
					Alert.show("The file(s) below are not added to the list: \n\n• " + arrFoundList.join("\n• "), "Information!");
				}
				updateProgBar();
				scrollFiles();
				uploadCheck();
			}
			
			private function validateFile(fileRef:FileReference):String {
				if (_extensions && _extensions.length > 0) {
					var ext:String = fileRef.type;
					
					if (ext)
						ext = ext.toUpperCase();
					else
						ext = fileRef.name.slice(fileRef.name.length - 4).toUpperCase();
					
					for (var i:int = 0; i < _extensions.length; i++)
						if (ext == _extensions[i])
							break;
					if (i == _extensions.length)
						return "*Type not supported";
				}
				
				return fileRef.size <= _maxSize? "":"*Too big (" + formatFileSize(fileRef.size) + ")";
			}
			
			// Called to format number to file size
			private function formatFileSize(numSize:Number):String {
				var strReturn:String;
				numSize = Number(numSize / 1024);
				strReturn = String(numSize.toFixed(1) + " KB");
				if (numSize > 1024) {
					numSize = numSize / 1024;
					strReturn = String(numSize.toFixed(1) + " MB");
					if (numSize > 1024) {
						numSize = numSize / 1024;
						strReturn = String(numSize.toFixed(1) + " GB");
					}
				}				
				return strReturn;
			}
	
			private function removeFiles():void {
				clearUpload();
				dispatchEvent(new Event("uploadCancel"));
				dispatchEvent(new ControlEvent("controlButton", "btnCancel"));
			}
			
			// Called to remove selected file(s) for upload
			private function removeFilescancel():void {
				var arrSelected:Array = listFiles.selectedIndices;
				if (arrSelected.length >= 1) {
					for (var i:Number = 0; i < arrSelected.length; i++) {
						_arrUploadFiles[Number(arrSelected[i])] = null;
					}
					var idx:int = 1;
					for (var j:Number = 0; j < _arrUploadFiles.length; j++) {
						if (_arrUploadFiles[j] == null) {
							_arrUploadFiles.splice(j, 1);
							j--;
						}	else
							_arrUploadFiles[j].no = idx++;
					}
					listFiles.dataProvider = _arrUploadFiles;
					if (_arrUploadFiles.length > 0)
						listFiles.selectedIndex = 0;
					else
						listFiles.selectedIndex = -1;
					
					updateProgBar();
					scrollFiles();
					uploadCheck();
				}
			}
			
			public function removeAllFiles():void {
				_arrUploadFiles.length = 0;
				listFiles.selectedIndex = -1;
				updateProgBar();
				scrollFiles();
				uploadCheck();
			}
			
			// Called to check if there is at least one file to upload
			private function uploadCheck():void {
				if (_arrUploadFiles.length == 0) {
					btnUpload.enabled = false;
					//listFiles.verticalScrollPolicy = "off";
				} else {
					btnUpload.enabled = true;
					//listFiles.verticalScrollPolicy = "on";
				}
			}
			
			// Disable UI control
			private function disableUI():void {
				btnAdd.enabled = false;
				btnRemove.enabled = false;
				btnUpload.enabled = false;
				btnCancel.enabled = true;
				listFiles.enabled = false;
				//listFiles.verticalScrollPolicy = "off";
			}
			
			// Enable UI control
			private function enableUI():void {
				btnAdd.enabled = true;
				btnRemove.enabled = true;
				btnUpload.enabled = true;
				btnCancel.enabled = false;
				listFiles.enabled = true;
				//listFiles.verticalScrollPolicy = "on";
			}
			
			// Scroll listFiles to selected row
			private function scrollFiles():void {
				listFiles.verticalScrollPosition = listFiles.selectedIndex;
				listFiles.validateNow();
			}
			
			// Called to upload file based on current upload number
			private function startUpload():void {
				if (_arrUploadFiles.length > 0) {
					disableUI();
					
					listFiles.selectedIndex = _numCurrentUpload;
					updateStatus("Uploading...");
					scrollFiles();
					
					// Variables to send along with upload
					var sendVars:URLVariables = new URLVariables();
					sendVars.action = "upload";
					
					var request:URLRequest = new URLRequest();
					request.data = sendVars;
					//set upload script url
					if (varSYSPlayer.login.labIp.text != "")
					{
						request.url = "http://" + varSYSPlayer.login.labIp.text + "/upload.php";
					}
					else
					{
				   		request.url = "http://www.channelwin.info/upload.php";
					}
				    request.method = URLRequestMethod.POST;
				    _refUploadFile = new FileReference();
				    _refUploadFile = _arrUploadFiles[_numCurrentUpload].file;
				    _refUploadFile.addEventListener(ProgressEvent.PROGRESS, onUploadProgress);
				   	_refUploadFile.addEventListener(Event.COMPLETE, onUploadComplete);
				    _refUploadFile.addEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
				  	_refUploadFile.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
				  	_refUploadFile.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onUploadCompleteData);
				    _refUploadFile.upload(request, "file", false);
				}
			}
			
			// Cancel and clear eventlisteners on last upload
			private function clearUpload():void {
				if (_refUploadFile)
				{
				_refUploadFile.removeEventListener(ProgressEvent.PROGRESS, onUploadProgress);
				_refUploadFile.removeEventListener(Event.COMPLETE, onUploadComplete);
				_refUploadFile.removeEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
				_refUploadFile.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
				_refUploadFile.cancel();
				}
				_numCurrentUpload = 0;
				//updateProgBar();
				enableUI();
			}
			
			// Called on upload cancel
			private function onUploadCanceled():void {
				clearUpload();
				dispatchEvent(new Event("uploadCancel"));
			}
			
			// Get upload progress
			private function onUploadProgress(event:ProgressEvent):void {
				var numPerc:Number = Math.round((event.bytesLoaded / event.bytesTotal) * 100);
				updateStatus("Uploading: " + numPerc.toString() + "%");
				updateProgBar(numPerc);
				var evt:ProgressEvent = new ProgressEvent("uploadProgress", false, false, event.bytesLoaded, event.bytesTotal);
				dispatchEvent(evt);
			}
			
			// update the status
			private function updateStatus(status:String, index:int = -1):void {
				if (index == -1)
					index = listFiles.selectedIndex;
				_arrUploadFiles[index].status = status;
				listFiles.invalidateList();
			}
			
			// Update progBar
			private function updateProgBar(numPerc:Number = 0):void {
				var strLabel:String = (_numCurrentUpload) + "/" + _arrUploadFiles.length;
				//strLabel = (_numCurrentUpload + 1 <= _arrUploadFiles.length && numPerc > 0 && numPerc < 100) ? numPerc + "% - " + strLabel : strLabel;
				//strLabel = (_numCurrentUpload + 1 == _arrUploadFiles.length && numPerc == 100) ? "Upload Complete - " + strLabel : strLabel;
				//strLabel = (_arrUploadFiles.length == 0) ? "" : strLabel;
				progBar.label = strLabel;
				//progBar.setProgress(numPerc, 100);
				
				progBar.setProgress(_numCurrentUpload + numPerc / 100, _arrUploadFiles.length);
				
				progBar.validateNow();
			}
			
			// Called on upload complete
			private function onUploadComplete(event:Event):void {
				trace("hhhhhhhhhhh");
				// update status
				updateStatus("Processing File...");
				

			}
			
			// Called on upload io error
			private function onUploadIoError(event:IOErrorEvent):void {
				trace("eeeeeeeeeeee");
				clearUpload();
				var evt:IOErrorEvent = new IOErrorEvent("uploadIoError", false, false, event.text);
				dispatchEvent(evt);
			}
			
			// Called on upload security error
			private function onUploadSecurityError(event:SecurityErrorEvent):void {
				trace("ffffffffffffff");
				clearUpload();
				var evt:SecurityErrorEvent = new SecurityErrorEvent("uploadSecurityError", false, false, event.text);
				dispatchEvent(evt);
			}
			
			// Called after data is received from the server after a successful upload
			private function onUploadCompleteData(event:DataEvent):void {
				updateStatus(event.data, _numCurrentUpload);
				if (event.data.indexOf("<success>true</success>") != -1)
				{
					var tmpFile:File = new File(File.applicationStorageDirectory.nativePath + File.separator + _refUploadFile.name);
				//	var tmpFile:File = new File("/Users/penn/Library/Preferences/SYSplayer/Local Store/" + _refUploadFile.name);
					tmpFile.deleteFile();
				}
				_numCurrentUpload++;				
				if (_numCurrentUpload < _arrUploadFiles.length) {
					startUpload();
				} else {
					enableUI();
					updateProgBar();
					clearUpload();
					dispatchEvent(new Event("uploadComplete"));
				}

			}
			
			// Change view state
			private function changeView():void {
				currentState = (currentState == "mini") ? "" : "mini";
			}
			
		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="mini">
			<mx:SetProperty name="height" value="60"/>
			<mx:SetProperty name="minHeight" value="60"/>
			<mx:SetStyle target="{btnView}" name="icon" value="@Embed('assets/application_put.png')"/>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Resize target="{this}" duration="1000"/>
		</mx:Transition>
	</mx:transitions>
	
	<mx:Canvas width="100%" height="100%">
		<mx:DataGrid id="listFiles" left="0" top="0" bottom="0" right="0" 
			allowMultipleSelection="true" 
			draggableColumns="false" resizableColumns="false" sortableColumns="false">
			<mx:columns>
				<mx:DataGridColumn headerText="#" dataField="no" width="30"/>
				<mx:DataGridColumn headerText="File" dataField="name" wordWrap="true"/>
				<mx:DataGridColumn headerText="Size" dataField="size" width="75" textAlign="right" paddingRight="5" />
				<mx:DataGridColumn headerText="Status" dataField="status">
					<mx:itemRenderer>
						<mx:Component>
							<assets:StatusBar />
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:Canvas>
	<mx:ControlBar horizontalAlign="center" verticalAlign="middle">
		<mx:Button id="btnAdd" toolTip="Add file(s)" click="addFiles()" icon="@Embed('assets/add.png')" width="26"/>
		<mx:Button id="btnRemove" toolTip="Remove file(s)" click="removeFiles()" icon="@Embed('assets/delete.png')" width="26"/>
		<mx:ProgressBar id="progBar" mode="manual" label="" labelPlacement="center" width="100%"/>
		<mx:Button id="btnCancel" toolTip="Cancel upload" icon="@Embed('assets/cancel2.png')" width="26" click="onUploadCanceled()"/>
		<mx:Button label="Upload" toolTip="Upload file(s)" id="btnUpload" click="startUpload()" icon="@Embed('assets/bullet_go.png')"/>
		<mx:Button id="btnView" toolTip="Show/Hide file(s)" icon="@Embed('assets/application_get.png')" width="26" click="changeView()"/>
	</mx:ControlBar>	
</mx:Panel>